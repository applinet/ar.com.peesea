// Détermine si l'événement clavier correspond à une séquence spéciale: copier/couper/coller, flèches, début, fin...function IsSpecialKey(e) {    // Flèches (37 à 40,  sur FF2 !), Début (36), Fin (35), Suppr (46), Retour arrière (8), Entrée (13), Tab (9), Ctrl+x, Ctrl+c, Ctrl+v    return ((e.which == 0) || ((e.which >= 35) && ( e.which < 40)) || (e.which == 46) || (e.which == 8) || (e.which == 13) || (e.which == 9) || (e.ctrlKey && ((e.which == 67) || (e.which == 86) || (e.which == 88))))}// jQuery$(document).ready(function() {	// CHAMPS MONETAIRES (class="Money" [Positive/Negative]")			// Appuye sur une touche	$(".Money").keypress(function(e) {		if(!IsSpecialKey(e)) {			// Point ou virgule, on n'en autorise qu'un seul			if((e.which == 46) ||(e.which == 44)) {				if(($(this).val().indexOf(".") != -1) || ($(this).val().indexOf(",") != -1)) {					e.preventDefault();				}			}			// "-" on n'en autorise qu'un seul au plus, si les négatifs sont autorisés			else if(e.which == 45) {				if(($(this).val().indexOf("-") != -1) || ($(this).hasClass("Positive"))) {					e.preventDefault();				}			}			// Caractère autre que [0-9]			else if((e.which < 48) || (e.which > 57)) {				e.preventDefault();			}		}	});	// Changement de la valeur (copier-coller par exemple)	$(".Money").change(function() {		// Uniquement points, virgules et [0-9] si les négatifs ne sont pas autorisés		if($(this).hasClass("Positive")) {			$(this).val($(this).val().replace(/[^,\.0-9]/gi, ""));		}		// Uniquement points, virgules, "-" et [0-9] si les négatifs sont autorisés		else {			$(this).val($(this).val().replace(/[^,\.\-0-9]/gi, ""));		}		// Suppression des "-", sauf au début de la chaine		while($(this).val().search(/.-./) != -1) {			$(this).val($(this).val().replace(/(.)-(.)/gi, "$1$2"));		}		// Si la valeur contient un point, on remplace par une virgule		$(this).val($(this).val().replace(/[\.]/gi, ","));			// Suppression des virgules en trop		var strTmp = $(this).val();		while(strTmp.split(",").length > 2) {			strTmp = strTmp.replace(/,/gi, "");		}		$(this).val(strTmp);		// Juste une virgule, on la retire		if($(this).val() == ",") $(this).val("");			// Si la valeur contient plus de 2 décimales, on retire celles en trop		$(this).val($(this).val().replace(/^(.+,[0-9]{2})[0-9]+$/gi, "$1"));				// Si la valeur fini par une virgule, on ajoute 00 derrière		$(this).val($(this).val().replace(/[,]$/gi, ",00"));				// Si la valeur n'a qu'une décimale, on ajoute un 0 derrière		if($(this).val().search(/,[0-9]$/) != -1)			$(this).val($(this).val() + "0");				// Si la valeur n'a pas de décimal, on ajoute 00 derrière		if(($(this).val() != "") && ($(this).val().search(/,[0-9]{2}$/) == -1))			$(this).val($(this).val() + ",00");	});	// CHAMPS DECIMAUX (class="Decimal [Positive/Negative]")		// Appuye sur une touche	$(".Decimal").keypress(function(e) {		if(!IsSpecialKey(e)) {					// Point ou virgule on n'en autorise qu'un seul			if((e.which == 46) || (e.which == 44)) {				if(($(this).val().indexOf(".") != -1) || ($(this).val().indexOf(",") != -1)) {					e.preventDefault();				}			}			// "-" on n'en autorise qu'un seul au plus, si les négatifs sont autorisés			else if(e.which == 45) {				if(($(this).val().indexOf("-") != -1) || ($(this).hasClass("Positive"))) {					e.preventDefault();				}			}			// Caractère autre que [0-9]			else if((e.which < 48) || (e.which > 57)) {				e.preventDefault();			}		}	});	// Changement de la valeur (copier-coller par exemple)	$(".Decimal").change(function() {		// Uniquement points, virgules et [0-9] si les négatifs ne sont pas autorisés		if($(this).hasClass("Positive")) {			$(this).val($(this).val().replace(/[^,\.0-9]/gi, ""));		}		// Uniquement points, virgules, "-" et [0-9] si les négatifs sont autorisés		else {			$(this).val($(this).val().replace(/[^,\.\-0-9]/gi, ""));		}				// remplacement des points par des virgules		$(this).val($(this).val().replace(/\./gi, ","));		// Suppression des virgules en trop		while($(this).val().split(",").length > 2) {			$(this).val($(this).val().replace(/,/gi, ""));		}		// Suppression des "-", sauf au début de la chaine		while($(this).val().search(/.-./) != -1) {			$(this).val($(this).val().replace(/(.)-(.)/gi, "$1$2"));		}			// Si la valeur commence par une virgule, on ajoute un 0 devant		$(this).val($(this).val().replace(/^,/gi, "0,"));				});			// CHAMPS ENTIERS (class="Interger")		// Appuye sur une touche	$(".Integer").keypress(function(e) {		if(!IsSpecialKey(e)) {			// "-" on n'en autorise qu'un seul au plus, si les négatifs sont autorisés			if(e.which == 45) {				if(($(this).val().indexOf("-") != -1) || ($(this).hasClass("Positive"))) {					e.preventDefault();				}			}			// Caractère autre que [0-9]			else if((e.which < 48) || (e.which > 57)) {				e.preventDefault();			}		}	});	// Changement de la valeur (copier-coller par exemple)	$(".Integer").change(function() {		// Uniquement [0-9] si les négatifs ne sont pas autorisés		if($(this).hasClass("Positive")) {			$(this).val($(this).val().replace(/[^0-9]/gi, ""));		}		// Uniquement "-" et [0-9] si les négatifs sont pas autorisés		else {			$(this).val($(this).val().replace(/[^\-0-9]/gi, ""));		}	});	// CHAMPS ALPHANUMERIQUES (class="AlphaNumeric")	$(".AlphaNumeric").keypress(function(e) {		if(!IsSpecialKey(e)) {				// Caractère autre que [0-9a-zA-Z]			if(((e.which < 48) || (e.which > 57)) && ((e.which < 65) || (e.which > 90)) && ((e.which < 97) || (e.which > 122))) {				e.preventDefault();			}		}	});	$(".AlphaNumeric").change(function() {		// Uniquement [0-9a-z]		$(this).val($(this).val().replace(/[^0-9a-zA-Z]/gi, ""));						});	// CHAMPS ALPHABETIQUES (class="Alpha")	$(".Alpha").keypress(function(e) {		if(!IsSpecialKey(e)) {					// Caractère autre que [a-zA-Z]			if(((e.which < 65) || (e.which > 90)) && ((e.which < 97) || (e.which > 122))) {				e.preventDefault();			}		}	});	$(".Alpha").change(function() {		// Uniquement [a-zA-Z]		$(this).val($(this).val().replace(/[^a-zA-Z]/gi, ""));						});			// CHAMPS NUMERIQUES (class="Numeric")	$(".Numeric").keypress(function(e) {		if(!IsSpecialKey(e)) {			// Caractère autre que [0-9]			if((e.which < 48) || (e.which > 57)) {				e.preventDefault();			}		}	});	$(".Numeric").change(function() {		// Uniquement [0-9]		$(this).val($(this).val().replace(/[^0-9]/gi, ""));						});	// CHAMPS DATES (class="Date")	$(".Date").keypress(function(e) {		if(!IsSpecialKey(e)) {					// "/", on n'en autorise que deux			if(e.which == 47) {				var SlashRegExp = new RegExp("/", "g");				if(($(this).val().indexOf("/") != -1) && ($(this).val().match(SlashRegExp).length >= 2)) {					e.preventDefault();				}			}			// Caractère autre que [0-9], "/"			else if((e.which != 47) && ((e.which < 48) || (e.which > 57))) {				e.preventDefault();			}		}	});	$(".Date").change(function() {		// Uniquement "/" et [0-9]		$(this).val($(this).val().replace(/[^\/0-9]/gi, ""));		// "JJ/MM/AA" => "JJ/MM/AAAA"		$(this).val($(this).val().replace(/^([0-9]{2}\/[0-9]{2}\/)([0-9]{2})$/, "$1" + "20" + "$2"));		// "J/M/AAAA" => "JJ/MM/AAAA"		$(this).val($(this).val().replace(/^([0-9])\/([0-9])\/([0-9]{4})$/, "0" + "$1" + "/0" + "$2" + "/$3"));		// "J/M/AA" => "JJ/MM/AAAA"		$(this).val($(this).val().replace(/^([0-9])\/([0-9])\/([0-9]{2})$/, "0" + "$1" + "/0" + "$2" + "/20$3"));		// "JJMMAAAA" => "JJ/MM/AAAA"		$(this).val($(this).val().replace(/^([0-9]{2})([0-9]{2})([0-9]{4})$/, "$1/$2/$3"));				// "JJMMAA" => "JJ/MM/AAAA"		$(this).val($(this).val().replace(/^([0-9]{2})([0-9]{2})([0-9]{2})$/, "$1/$2/20$3"));	});			// CHAMPS HEURES (class="Time")	$(".Time").keypress(function(e) {		if(!IsSpecialKey(e)) {					// ":", on n'en autorise qu'un			if(e.which ==58) {				if($(this).val().indexOf(":") != -1) {					e.preventDefault();				}			}			// Caractère autre que [0-9], ":"			else if(((e.which < 48) || (e.which > 57)) && (e.which != 58)) {				e.preventDefault();			}		}	});	$(".Time").change(function() {		// Uniquement ":" et [0-9]		$(this).val($(this).val().replace(/[^:0-9]/gi, ""));							// "HHMM" => "HH:MM"		$(this).val($(this).val().replace(/^([0-9]{2})([0-9]{2})$/, "$1:$2"));		// "HH" => "HH:00"		$(this).val($(this).val().replace(/^([0-9]{2})$/, "$1:00"));		// "H" => "HH:00"		$(this).val($(this).val().replace(/^([0-9])$/, "0$1:00"));		// "H:" => "HH:00"		$(this).val($(this).val().replace(/^([0-9]):$/, "0$1:00"));		// "HH:" => "HH:00"		$(this).val($(this).val().replace(/^([0-9]{2}):$/, "$1:00"));		// "H:M" => "HH:MM"		$(this).val($(this).val().replace(/^([0-9]):([0-9])$/, "0$1:0$2"));		// "HH:M" => "HH:MM"		$(this).val($(this).val().replace(/^([0-9]{2}):([0-9])$/, "$1:0$2"));		// "H:MM" => "HH:MM"		$(this).val($(this).val().replace(/^([0-9]):([0-9]{2})$/, "0$1:$2"));	});});