// Namespace fmrvar fmr = {	// Document	document: {		hasBeenSent: false,		// Sauvegarde en brouillon		saveAsDraft: function(callback) {			if(fmr.document.hasBeenSent) return false;			if(jQuery.trim($("#f_Titre").val()) == "") {				var Title = prompt(l_SaveAsDraft_GetTitle, "");				if(Title && Title.replace(/\s/gi, "") != "") $("#f_Titre").val(Title);				else return false;			}			if(confirm(l_SaveAsDraft_Confirm)) {				if((callback !== undefined) && (typeof callback == "function")) callback();				fmr.document.hasBeenSent = true;				$("#f_ActionAFaire").val("SaveAsDraft");				document.forms[0].submit();			}		},		// Sauvegarde en modèle		saveAsModel: function(callback) {			if(fmr.document.hasBeenSent) return false;			if(jQuery.trim($("#f_Titre").val()) == "") {				var Title = prompt(l_SaveAsModel_GetTitle, "");				if(Title && Title.replace(/\s/gi, "") != "") $("#f_Titre").val(Title);				else return false;			}			if(confirm(l_SaveAsModel_Confirm)) {				if((callback !== undefined) && (typeof callback == "function")) callback();				fmr.document.hasBeenSent = true;				$("#f_ActionAFaire").val("SaveAsModel");				document.forms[0].submit();			}		},		// Ouverture de la version imprimable d'un document		openPrintableVersion: function(pURL) {			window.open(pURL.substring(0, pURL.indexOf(".nsf") + 4) + "/v_Print/" + pURL.substring(pURL.lastIndexOf("/"), pURL.indexOf("?")) + "?OpenDocument", "_blank");		},			// Ouverture dans un vue particulière		openInView: function(view, newWindow) {			var url = window.location.href;			window.open(url.substring(0, url.indexOf(".nsf") + 4) + "/" + view + "/" + url.substring(url.lastIndexOf("/"), url.indexOf("?")) + "?OpenDocument", (newWindow ? "_blank" : "_self"));		},				// Soumission		// Propriétés (facultatives) de l'objet en paramètre:		// - action: chaine à transmettre dans "f_ActionAFaire", "soumettre" par defaut		// - confirm: texte de la boite de dialogue, "l_Conf_Submit" par defaut		// - callback: fonction appeler juste avant la soumission		submit: function(options) {			if(fmr.document.hasBeenSent) return false;			// Options ?			var boolHasOptions = (options !== undefined) && (typeof options == "object");			// Texte de la boite de dialogue			var strConfirm = l_Conf_Submit;			if(boolHasOptions && (options.confirm !== undefined) && (typeof options.confirm == "string")) strConfirm = options.confirm;									// Boite de dialogue						if(confirm(strConfirm)) {								// Callback, si défini				if(boolHasOptions && (options.callback !== undefined) && (typeof options.callback == "function")) options.callback();								fmr.document.hasBeenSent = true;				// Action				var strAction = "soumettre";				if(boolHasOptions && (options.action !== undefined) && (typeof options.action == "string")) strAction = options.action;							$("#f_ActionAFaire").val(strAction);				document.forms[0].submit();			}		},			// Annulation		cancel: function(callback) {			if(fmr.document.hasBeenSent) return false;			if(confirm(l_Conf_Cancel)) {				if((callback !== undefined) && (typeof callback == "function")) callback();				fmr.document.hasBeenSent = true;				$("#f_ActionAFaire").val("annuler");				document.forms[0].submit();			}		},				// Réengagement		reengage: function() {			if(confirm(l_Conf_Reengage)) {				window.location.href = window.location.protocol + "://" + window.location.host + "/" + Form.ReengagePath;			}		},				// Complément d'information		complement: function(callback) {			if(fmr.document.hasBeenSent) return false;			if(confirm(l_Conf_Complement)) {				if((callback !== undefined) && (typeof callback == "function")) callback();				fmr.document.hasBeenSent = true;				$("#f_ActionAFaire").val("complementer");				document.forms[0].submit();			}		},				// Switch sur l'avis dans les sections de validation		toggleValidAvis: function(caller, callback) {			if(caller === undefined) return;			var strIdx = caller.name.strRight("Forms_E").strLeft("_");			$("#Forms_E" + strIdx + "_Comments").parents("tr").children("td").eq(0).html(caller.value != "0" ? "" : "<img src=\"" + window.location.href.strLeft(".nsf") + ".nsf/mandatoryfield_cacheable.gif?OpenImageResource\" height=\"16\" width=\"16\" border=\"0\">");						// Appel de la fonction de callback			if((callback !== undefined) && (typeof callback == "function")) callback(caller);		}			},		// Utilitaires	utils: {			// Retourne un nom d'utilisateur avec lien vers l'annuaire		// TODO: support https		prettyUserName: function(strUserName) {			var strPSAUID = strUserName.substring(strUserName.lastIndexOf("-") + 1, strUserName.length);			strPSAUID = strPSAUID.substring(0, strPSAUID.indexOf("/")).trim();			return "<span class=\"SmartUserName\">" + strUserName + "<a href=\"http://annuaire-entreprise.inetpsa.com/?action=affichage_fiche_personne&uid=" + strPSAUID + "\" title=\"" + l_ToolTip_Annuaire + "\" target=\"_blank\"><img src=\"/icons/vwicn044.gif\"></a></span>";		},				// Affichage d'une popup d'aide		helpPopup: function(strTitle, strBody) {			$("body").append("<div id=\"HelpDlgBox\">" + strBody + "</div>");			$("#HelpDlgBox").dialog({				bgiframe: true, autoOpen: true, modal: true, resizable: false, title: strTitle,				width: Math.min(500, Math.max(400, screen.availWidth/2)),				buttons: { OK: function() { $("#HelpDlgBox").dialog("close"); }},				close: function() { $("#HelpDlgBox").dialog("destroy").remove(); }			});				},				// Génération d'une chaine de caractères aléatoires. Taille en paramètre, 10 sinon		randomString: function(length) {			if((length === undefined) || (typeof length != "number")) length = 10;			var strChars = "abcdefghijklmnopqrstuvwxyz0123456789";			var strTmp = "";			for(var i = 0; i < length; i++) {				strTmp += strChars.charAt(Math.round(Math.random()*36));			}			return strTmp;		},				// Tri d'une liste par libellé		sortDropdownByText: function(dropdown) {			// Copie des options pour trier			var tmpArray = [];			var i, j = dropdown.options.length;			for(i = 0; i < j; i++ ) {				tmpArray.push(new Option(dropdown.options[i].text, dropdown.options[i].value, dropdown.options[i].defaultSelected, dropdown.options[i].selected));			}				// Tri			tmpArray.sort(function(a,b) {				return a.text != b.text ? (a.text < b.text ? -1 : 1) : 0;			});						// MAJ de la liste			for(i = 0; i < j; i++ ) {				dropdown.options[i] = new Option(tmpArray[i].text, tmpArray[i].value, tmpArray[i].defaultSelected, tmpArray[i].selected); 			}		},		// Tri d'une liste par valeur		sortDropdownByValue: function(dropdown) {			// Copie des options pour trier			var tmpArray = [];			var i, j = dropdown.options.length;			for(i = 0; i < j; i++ ) {				tmpArray.push(new Option(dropdown.options[i].text, dropdown.options[i].value, dropdown.options[i].defaultSelected, dropdown.options[i].selected));			}				// Tri			tmpArray.sort(function(a,b) {				return a.value != b.value ? (a.value < b.value ? -1 : 1) : 0;			});						// MAJ de la liste			for(i = 0; i < j; i++ ) {				dropdown.options[i] = new Option(tmpArray[i].text, tmpArray[i].value, tmpArray[i].defaultSelected, tmpArray[i].selected); 			}		}			},		// Namespace helpers	ns: {				// Extension d'un namespace		// - ns: namespace à étendre		// - ext: l'extension à ajouter		//		- chaine de caractère: hiérarchie de constituants séparés par "."		//		- objet: ajout des propriétés de l'objet au namespace		extend: function(ns, ext) {					// Si on reçoit une chaine de caractère			if(typeof ext == "string") {				// Découpage et boucle sur les constituants				var parts = ext.split("."), parent = ns, pl = parts.length, i;				for(i = 0; i < pl; i++) {									// Ajout du constituant si il n'existe pas					if(typeof parent[parts[i]] == "undefined") {						parent[parts[i]] = {};					}					parent = parent[parts[i]];				}				return parent;							}			// Si on reçoit un objet					}	}};