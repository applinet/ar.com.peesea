/** Namespace fmr* Prototype* API*/// IIFE (Immediately-invoked function expression)(function(window, undefined){    var fmr = (function() {        var fmr = function(selector) {            return new fmr.fn.init(selector);        };                /*        * Prototype        */        fmr.fn = fmr.prototype = {            init: function(selector) {            	            	// Si on reçoit une chaine de caractères            	if(typeof selector == "string") {            		            		// Mémorisation du sélecteur            		this.selector = selector;            		            		// Si le sélecteur commence par "#", c'est un id            		if(selector.substr(0, 1) == "#") {            			this[0] = document.getElementById(selector.substr(1, selector.length));            			this.length = 1;            		}            	}            	            	return this;            },                        // Masquage            hide: function() {            	return this;            },			// Affichage                        show: function() {            	return this;            }        };                fmr.fn.init.prototype = fmr.fn;                        /*        * API        */                // Document Formulaires        fmr.document = {			hasBeenSent: false,			// Sauvegarde en brouillon			saveAsDraft: function(callback) {				if(fmr.document.hasBeenSent) return false;				if(jQuery.trim($("#f_Titre").val()) == "") {					var Title = prompt(l_SaveAsDraft_GetTitle, "");					if(Title && Title.replace(/\s/gi, "") != "") $("#f_Titre").val(Title);					else return false;				}				if(confirm(l_SaveAsDraft_Confirm)) {					if((callback !== undefined) && (typeof callback == "function")) callback();					fmr.document.hasBeenSent = true;					$("#f_ActionAFaire").val("SaveAsDraft");					document.forms[0].submit();				}			},				// Sauvegarde en modèle			saveAsModel: function(callback) {				if(fmr.document.hasBeenSent) return false;				if(jQuery.trim($("#f_Titre").val()) == "") {					var Title = prompt(l_SaveAsModel_GetTitle, "");					if(Title && Title.replace(/\s/gi, "") != "") $("#f_Titre").val(Title);					else return false;				}				if(confirm(l_SaveAsModel_Confirm)) {					if((callback !== undefined) && (typeof callback == "function")) callback();					fmr.document.hasBeenSent = true;					$("#f_ActionAFaire").val("SaveAsModel");					document.forms[0].submit();				}			},			// Ouverture de la version imprimable d'un document			openPrintableVersion: function(pURL) {				window.open(pURL.substring(0, pURL.indexOf(".nsf") + 4) + "/v_Print" + pURL.substring(pURL.lastIndexOf("/"), pURL.indexOf("?")) + "?OpenDocument", "_blank");			},				// Ouverture dans une vue particulière			openInView: function(view, newWindow) {				var url = window.location.href;				window.open(url.substring(0, url.indexOf(".nsf") + 4) + "/" + view + url.substring(url.lastIndexOf("/"), url.indexOf("?")) + "?OpenDocument", (newWindow ? "_blank" : "_self"));			},					// Soumission			// Propriétés (facultatives) de l'objet en paramètre:			// - action: chaine à transmettre dans "f_ActionAFaire", "soumettre" par defaut			// - confirm: texte de la boite de dialogue, "l_Conf_Submit" par defaut			// - callback: fonction appeler juste avant la soumission			submit: function(options) {				if(fmr.document.hasBeenSent) return false;				// Options ?				var boolHasOptions = (options !== undefined) && (typeof options == "object");				// Texte de la boite de dialogue				var strConfirm = l_Conf_Submit;				if(boolHasOptions && (options.confirm !== undefined) && (typeof options.confirm == "string")) strConfirm = options.confirm;										// Boite de dialogue				if(confirm(strConfirm)) {									// Callback, si défini					if(boolHasOptions && (options.callback !== undefined) && (typeof options.callback == "function")) options.callback();									// Action					var strAction = "soumettre";					if(boolHasOptions && (options.action !== undefined) && (typeof options.action == "string")) strAction = options.action;								fmr.document.hasBeenSent = true;					$("#f_ActionAFaire").val(strAction);					document.forms[0].submit();				}			},				// Annulation			cancel: function(callback) {				if(fmr.document.hasBeenSent) return false;				if(confirm(l_Conf_Cancel)) {					if((callback !== undefined) && (typeof callback == "function")) callback();					fmr.document.hasBeenSent = true;					$("#f_ActionAFaire").val("annuler");					document.forms[0].submit();				}			},					// Réengagement			reengage: function() {				if(confirm(l_Conf_Reengage)) {					window.location.href = window.location.protocol + "//" + window.location.host + "/" + Form.ReengagePath;				}				},					// Complément d'information			complement: function(callback) {				if(fmr.document.hasBeenSent) return false;				if(confirm(l_Conf_Complement)) {					if((callback !== undefined) && (typeof callback == "function")) callback();					fmr.document.hasBeenSent = true;					$("#f_ActionAFaire").val("complementer");					document.forms[0].submit();				}			},					// Switch sur l'avis dans les sections de validation			toggleValidAvis: function(caller, callback) {				if(caller === undefined) return;				var strIdx = caller.name.strRight("Forms_E").strLeft("_");				$("#Forms_E" + strIdx + "_Comments").parents("tr").children("td").eq(0).html(caller.value != "0" ? "" : "<img src=\"" + window.location.href.strLeft(".nsf") + ".nsf/mandatoryfield_cacheable.gif?OpenImageResource\" height=\"16\" width=\"16\" border=\"0\">");							// Appel de la fonction de callback				if((callback !== undefined) && (typeof callback == "function")) callback(caller);			}        };        			// Utilitaires		fmr.utils = {			// Génération d'une chaine de caractères aléatoires. Taille en paramètre, 10 sinon			randomString: function(length) {				if((length === undefined) || (typeof length != "number")) length = 10;				var strChars = "abcdefghijklmnopqrstuvwxyz0123456789";				var strTmp = "";				for(var i = 0; i < length; i++) {					strTmp += strChars.charAt(Math.round(Math.random()*36));				}				return strTmp;			}		};		// Interface utilisateur		fmr.ui = {				// Retourne un nom d'utilisateur avec lien vers l'annuaire			// TODO: support https			prettyUserName: function(strUserName) {				var strPSAUID = strUserName.substring(strUserName.lastIndexOf("-") + 1, strUserName.length);				strPSAUID = strPSAUID.substring(0, strPSAUID.indexOf("/")).trim();				return "<span class=\"SmartUserName\">" + strUserName + "<a href=\"http://annuaire-entreprise.inetpsa.com/?action=affichage_fiche_personne&uid=" + strPSAUID + "\" title=\"" + l_ToolTip_Annuaire + "\" target=\"_blank\"><img src=\"/icons/vwicn044.gif\"></a></span>";			},					// Affichage d'une popup d'aide			helpPopup: function(strTitle, strBody) {				$("body").append("<div id=\"HelpDlgBox\">" + strBody + "</div>");				$("#HelpDlgBox").dialog({					bgiframe: true, autoOpen: true, modal: true, resizable: false, title: strTitle,					width: Math.min(500, Math.max(400, screen.availWidth/2)),					buttons: { OK: function() { $("#HelpDlgBox").dialog("close"); }},					close: function() { $("#HelpDlgBox").dialog("destroy").remove(); }				});					},					// Tri d'une liste par libellé			sortDropdownByText: function(dropdown) {				// Copie des options pour trier				var tmpArray = [];				var i, j = dropdown.options.length;				for(i = 0; i < j; i++ ) {					tmpArray.push(new Option(dropdown.options[i].text, dropdown.options[i].value, dropdown.options[i].defaultSelected, dropdown.options[i].selected));				}					// Tri				tmpArray.sort(function(a,b) {					return a.text != b.text ? (a.text < b.text ? -1 : 1) : 0;				});							// Vidage de la liste				for(i = 0; i < j; i++) {					dropdown.remove(0);				}				// MAJ de la liste				for(i = 0; i < j; i++ ) {					dropdown.options[i] = new Option(tmpArray[i].text, tmpArray[i].value, tmpArray[i].defaultSelected, tmpArray[i].selected); 				} 						},			// Tri d'une liste par valeur			sortDropdownByValue: function(dropdown) {					// Copie des options pour trier				var tmpArray = [];				var i, j = dropdown.options.length;				for(i = 0; i < j; i++ ) {					tmpArray.push(new Option(dropdown.options[i].text, dropdown.options[i].value, dropdown.options[i].defaultSelected, dropdown.options[i].selected));				}						// Tri				tmpArray.sort(function(a,b) {					return a.value != b.value ? (a.value < b.value ? -1 : 1) : 0;				});					// Vidage de la liste				for(i = 0; i < j; i++) {					dropdown.remove(0);				}							// MAJ de la liste				for(i = 0; i < j; i++ ) {					dropdown.options[i] = new Option(tmpArray[i].text, tmpArray[i].value, tmpArray[i].defaultSelected, tmpArray[i].selected); 				}			}				};                		// Notes Address Book helpers		fmr.nab = {					// Récupération d'une entrée du carnet d'adresses			// En options:			// - name: nom Notes ou identifiant de l'utilisateur			// - fields: tableau de nom de champs			// Retourne objet dont les propriétés sont les champs 			getEntry: function(options) {				var oRet = {};						$.ajax({					url: window.location.href.strLeft(".nsf").strLeftBack("/") + "/fmrdne00.nsf/fmr.nab.getEntry?OpenAgent&name=" + encodeURIComponent(options.name) + "&fields=" + encodeURIComponent(options.fields.join(",")),					type: 'GET', dataType: 'json', cache: false, timeout: 30000, async: false,					// Echec de la requête					error: function() {						alert(l_Forms_Err_AJAX);							// Callback d'échec						if(options.failure && (typeof options.failure == "function")) options.failure();					},					// Réussite de la requête					success: function(json) {						oRet = json;						// Callback						if(options.success && (typeof options.success == "function")) options.success(json);					}				});				return oRet;							}		};		        				// AJAX		// En options:		// - url: string		// - type: "GET/POST", défaut "GET"		// - dataType: "text/xml", défaut "xml"		// - timeout: integer, défaut 30000		// - async: true/false, défaut true		// - data: données du post		// - contentType: string, défaut "application/x-www-form-urlencoded; charset=UTF-8"		// - success: function		// - error: function		//		// TODO:		// - dataType: "text/json/xml", défaut "xml"		// - cache: true/false, défaut true		// - headers: {}		fmr.ajax = function(options) {			if(!options) return;					// Formatte une réponse pour la passer aux fonctions de callback			var formatResponse = function(xhr) {				if(options.dataType == "xml")					return xhr.responseXML;				else					return xhr.responseText;						};					// XMLHttpRequest			var xhr = (window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"));			// Valeurs par défaut			options.type = options.type || "GET";			options.dataType = options.dataType || "xml";			options.async = (options.async != undefined ? options.async : true);			if(options.type == "POST") options.data = options.data || "";			// Gestion du cache. Ajout d'un paramètre "_=timestamp" à l'url. Ajout de "?" ou "&" si besoin			options.cache = (options.cache != undefined ? options.cache : true);			if(!options.cache) {				options.url += (options.url.indexOf("?") == -1 ? "?" : "&") + "_=" + (new Date()).getTime();			}					// contentType			options.contentType = options.contentType || "application/x-www-form-urlencoded; charset=UTF-8";			xhr.setRequestHeader("Content-type", options.contentType)			// Ouverture			xhr.open(options.type, options.url, options.async);			// Timeout, 30s par défaut si utilisation synchrone			if(options.async)				xhr.timeout = (options.timeout != undefined ? options.timeout : 30000);			// Timeout à 0 si utilisation synchrone			else				xhr.timeout = 0;					// Utilisation asynchrone, lors du changement d'état			if(options.async) {				xhr.onreadystatechange = function() {					if (xhr.readyState == 4) {	     				     					// Réussite, callback, response en paramètre     					if(xhr.status == 200) {	      					if(options.success && (typeof options.success == "function")) options.success(formatResponse(xhr));      					}      					// Echec, callback     					else {	      					if(options.error && (typeof options.error == "function")) options.error();      					}  					}				}; 			}			// Emission de la requète			xhr.send(options.type = "GET" ? null : options.data);			// Utilisation synchrone			if(!options.async) {				// Réussite				if(xhr.status == 200) {					if(options.success && (typeof options.success == "function")) options.success(formatResponse(xhr));				}				else {					if(options.error && (typeof options.error == "function")) options.error();				}			}		};					// Namespace helpers		fmr.ns = {					// Extension d'un namespace			// - ns: namespace à étendre			// - ext: l'extension à ajouter, chaine de caractères: hiérarchie de constituants séparés par "."			// Retourne l'extension			extend: function(ns, ext) {						// Découpage et boucle sur les constituants				var parts = ext.split("."), parent = ns, pl = parts.length, i;				for(i = 0; i < pl; i++) {									// Ajout du constituant si il n'existe pas					if(typeof parent[parts[i]] == "undefined") {						parent[parts[i]] = {};					}					parent = parent[parts[i]];				}				return parent;							},					// Fusion de 2 namespaces			// - dest: namespace à étendre			// - src: namespace à ajouter			// Retourne la fusion			merge: function(dest, src) {				var toString = Object.prototype.toString, objTest = toString.call({});				for(var property in src) {					if(src[property] && (objTest == toString.call(src[property]))) {						dest[property] = dest[property] || {};						fmr.ns.merge(dest[property], src[property]);					}					else {						dest[property] = src[property];					}				}				return dest;			}		};							// Attachement à l'objet global                return (window.fmr = fmr);            })();})(window);