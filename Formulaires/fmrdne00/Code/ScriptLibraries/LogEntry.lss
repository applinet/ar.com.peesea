'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class LogEntry
Declare Sub Initialize()
Declare Sub QuickLog(pLogType As Integer, pErr As Integer, pErl As Integer, pMsg As String, pComponent As String, pDebug As String)

'++LotusScript Development Environment:2:5:(Declarations):0:10

Const LOGLEVEL_EMERG% = 0
Const LOGLEVEL_ALERT% = 1
Const LOGLEVEL_CRITICAL% = 2
Const LOGLEVEL_ERROR% = 3
Const LOGLEVEL_WARNING% = 4
Const LOGLEVEL_NOTICE% = 5
Const LOGLEVEL_INFO% = 6
Const LOGLEVEL_DEBUG% = 7

' Variables pour mémoization
Dim LogEntry_Session As NotesSession
Dim LogEntry_Database As NotesDatabase
Dim LogEntry_DocContext As NotesDocument
Dim LogEntry_AgentName As String
Dim LogEntry_DBName As String
Dim LogEntry_UserName As String

' Cette classe représente une entrée dans la base de log applicative
Public Class LogEntry
	
	' Membres
	Public LogType As Integer
	Public DBName As String
	Public Component As String
	Public AgentName As String
	Public LibName As String
	Public ClassName As String
	Public SubName As String
	Public DocID As String
	Public UserName As String
	Public Err As Integer
	Public Erl As Integer
	Public Msg As String
	Private ErrDebug As String
	
	' Propriétés
	Property Get IsFatal As Boolean
		IsFatal = (Me.LogType = LOGLEVEL_EMERG%) Or (Me.LogType = LOGLEVEL_ALERT%) Or (Me.LogType = LOGLEVEL_CRITICAL%) Or (Me.LogType = LOGLEVEL_ERROR%)
	End Property
	
	' Constructeur
	Public Sub New()
		On Error Goto ErrorHandler
		
		Me.DBName = LogEntry_DBName
		Me.AgentName = LogEntry_AgentName
		If Not LogEntry_DocContext Is Nothing Then Me.DocID = LogEntry_DocContext.UniversalID
		Me.UserName = LogEntry_UserName
		
		Exit Sub

ErrorHandler:
		msgbox("LogEntry - New - Erreur " + Str(Err) + " - Ligne " + Str(Erl) + " - " + Error$)		
		Exit Sub
	End Sub
	
	
	
	' Convertion objet => chaine de caratères
	Public Function ToString() As String
		On Error Goto ErrorHandler
		ToString = CStr(Me.LogType) + "#" + CStr(Me.Err) + "#" + Me.Msg + "#" + CStr(Me.Erl) + "#" + Me.DBName + "#" + Me.AgentName + "#" + Me.LibName + "#" + Me.ClassName + "#" + Me.SubName + "#" + Me.Component + "#" + Me.DocID + "#" + Me.UserName + "#" + Me.ErrDebug
		Exit Function

ErrorHandler:
		MsgBox("LogEntry - ToString - Erreur " + Str(Err) + " - Ligne " + Str(Erl) + " - " + Error$)		
		Exit Function
	End Function
	
	
	' Convertion chaine de caractères => objet
	Public Sub FromString(pString As String)
		On Error Goto ErrorHandler
		
		Dim MembersValues As Variant
		MembersValues = Split(pString, "#")
		Me.LogType = CInt(MembersValues(0))
		Me.Err = Cint(MembersValues(1))
		Me.Msg = MembersValues(2)
		Me.Erl = Cint(MembersValues(3))
		Me.DBName = MembersValues(4)
		Me.AgentName = MembersValues(5)
		Me.LibName = MembersValues(6)
		Me.ClassName = MembersValues(7)
		Me.SubName = MembersValues(8)
		Me.Component = MembersValues(9)
		Me.DocID = MembersValues(10)
		Me.UserName = MembersValues(11)
		Me.ErrDebug = MembersValues(12)
		
		Exit Sub
		
ErrorHandler:
		MsgBox("LogEntry - FromString - Erreur " + Str(Err) + " - Ligne " + Str(Erl) + " - " + Error$)		
		Exit Sub
	End Sub
	
	' Ajouter d'une ligne au texte de debug
	Public Sub ToMsgbox()
		
		On Error Goto ErrorHandler
		
		Dim MessageString As String
		
		Select Case Trim(Me.LogType)
		Case LOGLEVEL_EMERG%: MessageString = "LogEntry - Emergency"
		Case LOGLEVEL_ALERT%: MessageString = "LogEntry - Alert"
		Case LOGLEVEL_CRITICAL%: MessageString = "LogEntry - Critical"
		Case LOGLEVEL_ERROR%: MessageString = "LogEntry - Error"
		Case LOGLEVEL_WARNING%: MessageString = "LogEntry - Warning"
		Case LOGLEVEL_NOTICE%: MessageString = "LogEntry - Notice"
		Case LOGLEVEL_INFO%: MessageString = "LogEntry - Info"
		Case LOGLEVEL_DEBUG%: MessageString = "LogEntry - Debug"
		Case Else: MessageString = "LogEntry"
		End Select
		
		If Me.DBName <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Base: " + Me.DBName
		If Me.Component <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Composant: " + Me.Component
		If Me.AgentName <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Agent: " + Me.AgentName
		If Me.LibName <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Bibliothèque: " + Me.LibName
		If Me.ClassName <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Classe: " + Me.ClassName
		If Me.SubName <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Procédure: " +Me.SubName
		If Me.DocID <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Document: " +Me.DocID
		If Me.UserName <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Utilisateur: " +Me.UserName
		If Me.Erl > 0 Then MessageString = MessageString + Chr(10) + Chr(13) + "Ligne: " + Str(Me.Erl)
		If Me.Err > 0 Then MessageString = MessageString + Chr(10) + Chr(13) + "Code: " + Str(Me.Err)
		If Me.Msg <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Message: " + Me.Msg
		If Me.ErrDebug <> "" Then MessageString = MessageString + Chr(10) + Chr(13) + "Debug:" + Implode(split(Me.ErrDebug, "@"), Chr(10) + Chr(13))
		Msgbox(MessageString)		
		
		Exit Sub
		
ErrorHandler:
		Msgbox("LogEntry - Msgbox - Erreur " + Str(Err) + " - Ligne " + Str(Erl) + " - " + Error$)		
		Exit Sub
	End Sub	
	
	' Ajouter d'une ligne au texte de debug
	Public Sub AddDebugLine(paramLine As String)
		On Error Goto ErrorHandler
		
		If Me.ErrDebug = "" then
			Me.ErrDebug = paramLine
		else
			Me.ErrDebug = Me.ErrDebug + "@" + paramLine
		End if  
		
		Exit Sub		
		
ErrorHandler:
		MsgBox("LogEntry - AddDebugLine - Erreur " + Str(Err) + " - Ligne " + Str(Erl) + " - " + Error$)		
		Exit Sub	
	End Sub	
	
	' Sauvegarde du document de log
	' 	- pServer, pDBPath: chemin de la base de log.
	' Si paramètres vides, calcul de la base par defaut: "serveur-courant!prdxx/base/prddnlog.nsf"
	Public Sub Save(pServer As String, pDBPath As String)
		On Error Goto ErrorHandler
		
		Dim LogDB As NotesDatabase
		Dim i As Integer
		
		' Serveur non précisé => serveur courant
		If pServer = "" Then pServer = LogEntry_Database.Server
		
		' Base non précisée => base de log par défaut
		If pDBPath = "" Then
			Dim strFilePath As String
			strFilePath = LogEntry_Database.FilePath
			Dim strFileName As String
			strFileName = LogEntry_Database.FileName
			
			Dim dirSeparator As String
			dirSeparator = Right(Strleftback(strFilePath, strFileName), 1)
			pDBPath = Strleft(strFilePath, dirSeparator, 5, 2) + dirSeparator + Left(strFileName, 3) + "dnlog.nsf"
			
		End If
		
		' On ouvre la base de log
		Set LogDB = New NotesDatabase(pServer, pDBPath)
		
		' Si l'objet représentant la base à été créé et que la base a été ouverte sans problème
		If (Not LogDB Is Nothing) And LogDB.IsOpen Then
			
			' On créé un nouveau document
			Dim LogEntryDocument As New NotesDocument(LogDB)
			LogEntryDocument.Form = "LogEntry"
			LogEntryDocument.LogEntry_LogType = Me.LogType
			LogEntryDocument.LogEntry_LogTime = Now
			LogEntryDocument.LogEntry_DBName = Trim(Me.DBName)
			LogEntryDocument.LogEntry_Component = Trim(Me.Component)
			LogEntryDocument.LogEntry_AgentName = Trim(Me.AgentName)
			LogEntryDocument.LogEntry_LibName = Trim(Me.LibName)
			LogEntryDocument.LogEntry_ClassName = Trim(Me.ClassName)
			LogEntryDocument.LogEntry_SubName = Trim(Me.SubName)
			LogEntryDocument.LogEntry_DocID = Trim(Me.DocID)
			LogEntryDocument.LogEntry_UserName = Me.UserName
			LogEntryDocument.LogEntry_Err = Me.Err
			LogEntryDocument.LogEntry_Erl = Me.Erl			
			LogEntryDocument.LogEntry_Msg = Trim(Me.Msg)
			
			Dim rtiTmp As New NotesRichTextItem(LogEntryDocument,"LogEntry_ErrDebug")
			Dim arrTmp As Variant
			arrTmp = Split(Me.ErrDebug, "@")
			For i = 0 To Ubound(arrTmp)
				if i <> 0 Then rtiTmp.AddNewline(1)
				rtiTmp.AppendText(arrTmp(i))
			Next
			
			' On enregistre le document
			Call LogEntryDocument.Save(False, False)
			
		' Si la base n'a pas pu être ouverte, on envoie un message dans le journal
		Else
			MsgBox("Impossible d'ouvrir la base de log '" + pDBPath + "' sur le serveur '" + pServer + "'")			
			Call Me.ToMsgbox()
		End If
		
		Exit Sub		
		
ErrorHandler:
		MsgBox("LogEntry - Save - Erreur " + Str(Err) + " - Ligne " + Str(Erl) + " - " + Error$)		
		Exit Sub	
	End Sub	
	
End Class
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize()
	Set LogEntry_Session = New NotesSession
	Set LogEntry_DocContext = LogEntry_Session.DocumentContext

	Set LogEntry_Database = LogEntry_Session.CurrentDatabase
	LogEntry_DBName = LogEntry_Database.Title
	
	Dim agentTmp As NotesAgent
	Set agentTmp = LogEntry_Session.CurrentAgent
	LogEntry_AgentName = agentTmp.Name
	
	Dim nameTmp As New NotesName(LogEntry_Session.EffectiveUserName)
	LogEntry_UserName = nameTmp.Canonical

End Sub

'++LotusScript Development Environment:2:2:QuickLog:0:8
' Enregistrement rapide d'un message dans la log applicative.
Sub QuickLog(pLogType As Integer, pErr As Integer, pErl As Integer, pMsg As String, pComponent As String, pDebug As String)
	Dim LogEntry As New LogEntry
	LogEntry.LogType = pLogType	
	LogEntry.Err = pErr
	LogEntry.Erl = pErl
	LogEntry.Msg = pMsg
	LogEntry.Component = pComponent
	Call LogEntry.AddDebugLine(pDebug)

	Dim session As New NotesSession
	Dim database As NotesDatabase
	Set database = session.CurrentDatabase
	
	' Enregistrement dans la base nommée "PRDdnlog.nsf" dans le répertoire courant
	Call LogEntry.Save(database.Server, Strleftback(database.FilePath, database.FileName) + Left(database.FileName, 3) + "dnlog.nsf")
	
End Sub




