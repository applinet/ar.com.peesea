// Cette fonction écrit un texte dans le documentfunction Print(pTxt) {	if (arguments.length > 1){		// Expression régulière pour retrouver les $1, $2, etc dans la chaîne en premier paramètre		var expReg = new RegExp(/\$\d/g);		var res = pTxt.match(expReg);		// Si on a trouvé une chaîne correspondante		if (res) {			// On parcoure la liste des $ trouvés et on les remplace par les arguments			var i = 0;			while (i < res.length) {				var arg = "";				// Test si l'argument existe dans les paramètres de la fonction				if (arguments[i+1] != undefined)					arg = arguments[i+1];									pTxt = pTxt.replace(res[i], arg);				i++;			}		}	}	document.write(pTxt);}// Suppression des espaces surnuméraires (deprecated)function Trim(pStr) {	try {		Ereg = /  /;		while(Ereg.test(pStr)) {			pStr = pStr.replace(/  /gi, " ");		}		return pStr.replace(/^\s/gi, "").replace(/\s$/gi, "").replace(/^\r/gi, "").replace(/\r$/gi, "").replace(/^\n/gi, "").replace(/\n$/gi, "");;	}	catch(Err) {		return pStr;	}}// Traduction d'un texte dans la langue de l'utilisateur courant.// Attend en paramètre le texte à traduire sous la forme "_FR:Texte FR##_EN:Texte EN..."function t(pTxt, pLng) {	var p1 = pTxt.indexOf("_" + pLng + ":");	if(p1 != -1) {		var pTxt = pTxt.substr(p1, pTxt.length);		var p2 = pTxt.indexOf("##");	 	return (p2 != -1 ? pTxt.slice(4, p2) : "?")	}	else return "?";}// Affichage d'une popup d'aidefunction OpenHelpDlgBox(pTitle, pBody) {	$("body").append("<div id=\"HelpDlgBox\">" + pBody + "</div>");	$("#HelpDlgBox").dialog({		bgiframe: true, autoOpen: true, modal: true, resizable: false,		title: pTitle,		width: Math.min(500, Math.max(400, screen.availWidth/2)),		buttons: { OK: function() { $("#HelpDlgBox").dialog("close"); }},		close: function() { $("#HelpDlgBox").dialog("destroy").remove(); }	});}// Conversion nouvelle ligne en <br> et inversementString.prototype.nl2br = function() {	var br = (typeof arguments[0] != "undefined" ? arguments[0] : "<br />");	return this.replace(/\r\n|\r|\n/g, br);} String.prototype.br2nl = function() {	var nl = (typeof arguments[0] != "undefined" ? arguments[0] : "\r\n");	return this.replace(/\<br(\s*\/|)\>/g, nl);}// Conversion espace insécables en espaces et inversementString.prototype.nbsp2sp = function() { return this.replace(/&nbsp;/gi, " "); }String.prototype.sp2nbsp = function() { return this.replace(/\s/gi, "&nbsp;"); }// TrimString.prototype.trim = function() { return this.replace(/^\s+/, "").replace(/\s+$/, ""); };String.prototype.ltrim = function() { return this.replace(/^\s+/, ""); };String.prototype.rtrim = function() { return this.replace(/\s+$/, ""); };// @Left/@Right/@LeftBack/@RightBack equivalentsString.prototype.strLeft = function() { return (this.indexOf(arguments[0]) == -1 | arguments[0] == "") ? "" : this.split(arguments[0])[0]; };String.prototype.strRight = function() { idx = this.indexOf(arguments[0]); return (idx == -1 | arguments[0] == "") ? "" : this.substr(idx + arguments[0].length); };String.prototype.strLeftBack = function() { arr = this.split(arguments[0]); arr.pop(); return (arguments[0] == null | arguments[0] == "") ? "" : arr.join(arguments[0]) };String.prototype.strRightBack = function() { arr = this.split(arguments[0]); return (this.indexOf(arguments[0]) == -1 | arguments[0] == "") ? "" : arr.pop() };// @UrlQueryString equivalentString.prototype.urlQueryString = function() {	if(this.indexOf(arguments[0]) == -1 | arguments[0] == "") return "";	var name = arguments[0];	name = name.replace(/[[]/,"\[").replace(/[]]/,"\]");	var regex = new RegExp("[\?&]" + name + "=([^&#]*)");	var results = regex.exec(this);	if( results == null ) return "";	else return results[1];}// Numéro de semaineDate.prototype.getISOWeekNum = function() {     var target  = new Date(this.valueOf());          // ISO week date weeks start on monday, so correct the day number       var dayNr   = (this.getDay() + 6) % 7;          // ISO 8601 states that week 1 is the week with the first thursday of that year.       // Set the target date to the thursday in the target week       target.setDate(target.getDate() - dayNr + 3);       var firstThursday = target.valueOf();          // Set the target to the first thursday of the year       // First set the target to january first       target.setMonth(0, 1);       // Not a thursday? Correct the date to the next thursday       if (target.getDay() != 4) target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);          // The weeknumber is the number of weeks between the first thursday of the year and the thursday in the target week       return 1 + Math.ceil((firstThursday - target) / 604800000); // 604800000 = 7 * 24 * 3600 * 1000  }// Ajustement de dateDate.prototype.adjustDay = function() {	if((arguments[0] === undefined) || (typeof arguments[0] != "number")) return this;	return new Date(this.getTime() + arguments[0]*86400000);};Date.prototype.adjustMonth = function() { 	if((arguments[0] === undefined) || (typeof arguments[0] != "number")) return this;	return new Date(this.getFullYear(), this.getMonth() + arguments[0], this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds());};Date.prototype.adjustYear = function() { 	if((arguments[0] === undefined) || (typeof arguments[0] != "number")) return this;	return new Date(this.getFullYear() + arguments[0], this.getMonth(), this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds());};// Vérification Luhnvar luhn10 = function(cc) {    // digits 0-9 doubled with nines cast out    var doubled = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];    // remove non-digit characters    cc = cc.replace(/[^\d]/g, '');    var digits = cc.split('');    // alternate between summing the digits or the result of doubling the digits and casting out nines (see Luhn description)    var alt = false;    var total = 0;    while(digits.length) {        var d = Number(digits.pop());        total += (alt ? doubled[d] : d);        alt = !alt;    }    return total % 10 == 0;}