'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

Use "Const"
Use "LogEntry_old"
Use "ProcessingTools"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub BuildMailVIDEO(paramMailDoc As NotesDocument,paramDoc As NotesDocument,paramMailField As String,  paramMailLinkField As String)
Declare Sub ChangeStateWithoutHisto(paramDoc As NotesDocument, paramTargetState As Integer, paramStateType As String)
Declare Sub CancelDocVIDEO(paramDoc As NotesDocument, paramTargetState As Integer, paramMailTitle As Variant)

'++LotusScript Development Environment:2:5:(Declarations):0:2

'++LotusScript Development Environment:2:2:BuildMailVIDEO:0:8

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Cette procédure se charge d'ajouter les onglets et  le lien à un mail
' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Sub BuildMailVIDEO(paramMailDoc As NotesDocument,paramDoc As NotesDocument,paramMailField As String,  paramMailLinkField As String)
	
	' Gestion d'erreurs
	On Error Goto BuildMailVIDEOErrorManagement
	
	' - - - - - - - - - -
	' Initialisation
	' - - - - - - - - - -
	
	' Variables locales
	Dim RichTextNavigator As NotesRichTextNavigator
	Dim RichTextRange As NotesRichTextRange
	Dim RichTextItem As NotesRichTextItem
	
	Dim tempString As String
	Dim pos1 As Long
	Dim pos2 As Long
	Dim textAvant As String	
	Dim textApres As String
	Dim champ As String
	Dim item As NotesItem
	Dim flag As Boolean
	
	
	' On récupère la vue des documents de paramétrages
	Set ParamsView = CurrentDB.GetView("v_FormsParams")
	
	' On récupère le document de paramétrage pour le modèle du document traité
	Set ParamsDoc = ParamsView.GetDocumentbyKey(paramDoc.f_TypeForm(0))
	
	' On récupère le document du profil
	Set ProfileDoc = CurrentDB.GetProfileDocument("m_ProfileParam")
	
	
	' - - - - - - - - - -
	' Traitement
	' - - - - - - - - - -
	
	' On récupère le corps du mail	
	Set RichTextItem = paramMailDoc.GetFirstItem("Body")
	
	If RichTextItem Is Nothing Then
		Set RichTextItem = New NotesRichTextItem(paramMailDoc, "Body")
	End If
	
	Call RichTextItem.AddNewLine(1)
	
	' On récupère le contenu du mail dans le document de paramètrage
	Set RichTextItem2 = ParamsDoc.GetFirstItem(paramMailField)
	Call RichTextItem.AppendRTItem(RichTextItem2)
	
	Call RichTextItem.AddNewLine(1)
	
	
	' On recherche dans le texte du mail les balises de type <!--#Nom_Du_Champ#--> et 
	' on remplace cette balise par la valeur du champ	
	Set RichTextNavigator = RichTextItem.CreateNavigator
	Set RichTextRange = RichTextItem.CreateRange
	
	' on récupère le premier paragraphe du mail	
	Call RichTextNavigator.FindFirstElement(RTELEM_TYPE_TEXTPARAGRAPH)
	RichTextRange.SetBegin(RichTextNavigator)
	RichTextRange.SetEnd(RichTextNavigator)
	
	tempString = RichTextRange.TextParagraph
	
	Do	
		If(Instr(1,tempString,"<!--#")<>0) Then
			While (Instr(1,tempString,"<!--#")<>0)
				pos1 = Instr(1, tempString, "<!--#")
				If pos1<>0 Then 	
					textAvant = Strleft(tempString,"<!--#")
					pos2 = Instr(1, tempString, "#-->")
					textApres = Strright(tempString, "#-->")
					champ = Strleft(Strright(tempString, "<!--#"), "#-->")
					If paramDoc.HasItem(champ) Then
						Set item = CurrentDoc.GetFirstItem(champ)
						If (item.Type=NAMES ) Then
							tempString = textAvant + Strleft(Strright(paramDoc.GetItemValue(champ)(0),"CN="),"-") + textApres
						Else
							If(Ubound(paramDoc.GetItemValue(champ))=0) Then
								tempString = textAvant + Cstr(paramDoc.GetItemValue(champ)(0)) + textApres							
							Else
								Forall value In paramDoc.GetItemValue(champ)
									textAvant = textAvant + Cstr(value) + Chr$(13)
								End Forall
								tempString = textAvant + textApres
							End If
							
						End If				
					Else
						tempString = textAvant + textApres
					End If
				End If
			Wend
			
			Call RichTextItem.BeginInsert(RichTextNavigator)	
			Call RichTextItem.AppendText(tempString)
			Call RichTextItem.EndInsert
			Call RichTextRange.SetBegin(RichTextNavigator)
			Call RichTextRange.SetEnd(RichTextNavigator)
			
			Call RichTextRange.Remove
			
			Call RichTextRange.SetBegin(RichTextNavigator)
			Call RichTextRange.SetEnd(RichTextNavigator)
			
			tempString = RichTextRange.TextParagraph
		Else
			flag = RichTextNavigator.FindNextElement(RTELEM_TYPE_TEXTPARAGRAPH)
			If (flag) Then
				RichTextRange.SetBegin(RichTextNavigator)
				RichTextRange.SetEnd(RichTextNavigator)
				
				tempString = RichTextRange.TextParagraph
			Else
				tempString=""
			End If			
		End If
	Loop While tempString<>""
	
	
	Call RichTextRange.Reset
	Call RichTextItem.Compact
	Call RichTextItem.Update	
	
	
	' On ajoute le champs "URL" au mail
	paramMailDoc.URL = paramDoc.URL(0)
	
	If(paramMailLinkField <> "") Then
	' On récupère le lien dans le document de profil
		Set RichTextItem2 = ProfileDoc.getFirstItem(paramMailLinkField)
		Call RichTextItem.AppendRTItem(RichTextItem2)
	End If
	
	' C'est fini, on sort
	Exit Sub
	
	
	' - - - - - - - - - - - - - - -
	' Gestion d'erreurs
	' - - - - - - - - - - - - - - -
BuildMailVIDEOErrorManagement:
	
	' On log l'erreur		
	Call CurrentLogEntry.Clear
	CurrentLogEntry.LogType		= LOGTYPE_ERROR$
	CurrentLogEntry.LibName		= "VIDEOTools"
	CurrentLogEntry.SubName		= "BuildMailVIDEO"
	CurrentLogEntry.ErrLine 			= Erl
	CurrentLogEntry.ErrCode		= Err
	CurrentLogEntry.ErrMsg			= Error$
	CurrentLogEntry.Save
	
	' On ajoute l'erreur à la liste des erreurs
	Call CurrentProcessStatus.AddErr(Err, True)
	
	Error ERROR_PROCESSED%
	Exit Sub
End Sub

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Cette procédure se charge de changer l'état d'un document
' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' Cette procédure se charge d'annuler un document
' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

'++LotusScript Development Environment:2:2:ChangeStateWithoutHisto:1:8
Sub ChangeStateWithoutHisto(paramDoc As NotesDocument, paramTargetState As Integer, paramStateType As String)
	
	' Gestion d'erreurs
	On Error Goto ChangeStateErrorManagement
	
	' - - - - - - - - - -
	' Initialisation
	' - - - - - - - - - -
	
	' Variables locales
	Dim Res As Variant
	Dim Formule As String
	Dim stEtatCible As String
	Dim itemActeursWorkflowMembresGroupes As NotesItem
	
	' Nettoyage et conversion en chaine de l'état dans lequel on souhaitese placer
	stEtatCible = Trim(Cstr(paramTargetState))
	
	' On récupère la vue des documents de paramétrages
	Dim ParamsView As NotesView
	Set ParamsView = CurrentDB.GetView("v_FormsParams")
	
	' On récupère le document de paramétrage pour le modèle du document traité
	Dim ParamsDoc As NotesDocument
	Set ParamsDoc = ParamsView.GetDocumentbyKey(paramDoc.f_TypeForm(0))
	
	
	' - - - - - - - - - -
	' Traitement
	' - - - - - - - - - -
	
	' Si on sort d'un état initial
	' i.e. : utilisation d'un modèle ou d'un brouillon. On supprime le titre
	If paramDoc.f_TypeEtat(0) = "Initial" Then
		paramDoc.f_EstModele = 0
		paramDoc.f_EstBrouillon = 0
		paramDoc.removeItem("f_Titre")
	End If
	
	' Récupération du nom de l'état cible dans le paramétrage
	' Les noms sont sous la forme "_X_Nom", ou X est le numéro de l'état cible
	' Cette formule récupère le nom, à droite du numéro d'état
	Formule = |"_"+@Trim(@Right(f_EtatsNoms;"_|+stEtatCible+|_"))|
	paramDoc.f_EtatNoms = Evaluate(Formule,ParamsDoc)
	
	' Récupération du nom du masque à utiliser pour l'état cible
	Formule = |@Trim(@Right(f_EtatsForms;"|+stEtatCible+|:"))|
	Res = Evaluate(Formule,ParamsDoc)
	paramDoc.Form = Res(0)
	
	' On force f_AuteursPotentiels à une forme de type cn=...,ou=... (cannonique) pour que le contrôle d'accès au sections fonctionne correctement
	Formule =|@Name([Canonicalize];f_AuteursPotentiels)|
	paramDoc.f_AuteursPotentiels = Evaluate(Formule,paramDoc)
	
	' Calcul de l'intersection @UserNamesList et f_ActeursGroupe
	' Le champ f_ActeursWorkflowGroupes contient la liste de tous les groupes qui sont intervenu dans le workflow après l'état initial jusqu'à l'instant présent
	If (paramDoc.f_TypeEtat(0)<>"Initial") Then
		Formule = |@Trim(@Unique(f_ActeursWorkflowGroupes:@Keywords(f_ActeursGroupe;@UserNamesList;"")))|
		paramDoc.f_ActeursWorkflowGroupes = Evaluate(Formule,paramDoc)

		' On s'occupe de remplir le champ f_ActeursWorkflowMembresGroupes en "explosant" les groupes du champ f_ActeursWorkflowGroupes
		' Récupération du champ devant contenir la liste des personnes appartenant aux groupes du workflow (création si il n'existe pas)
		Set itemActeursWorkflowMembresGroupes = paramDoc.GetFirstItem("f_ActeursWorkflowMembresGroupes")
		If itemActeursWorkflowMembresGroupes Is Nothing Then Set itemActeursWorkflowMembresGroupes = New NotesItem(paramDoc, "f_ActeursWorkflowMembresGroupes", "", READERS)
		
		ForAll nomGroupe In paramDoc.f_ActeursWorkflowGroupes
			' Ajout des membres du groupe à la liste des noms			
			itemActeursWorkflowMembresGroupes.AppendToTextList(Evaluate(|@Sort(@Unique(@Name([Canonicalize]; @DBLookup("":"NoCache"; "":"names.nsf"; "($VIMGroups)" ; "| + CStr(nomGroupe) + |"; "Members"; [FAILSILENT]))))|))
		End ForAll
		
		'Format canonique
		paramDoc.f_ActeursWorkflowMembresGroupes = Evaluate(|@Sort(@Unique(@Trim(@Name([Canonicalize]; f_ActeursWorkflowMembresGroupes))))|, paramDoc)
		
		itemActeursWorkflowMembresGroupes.IsNames = True
		itemActeursWorkflowMembresGroupes.IsSummary = True
	End If
	
	' Le champ f_ActeursWorkflowIndividus contient la liste de tous les individus qui sont intervenu dans le workflow après l'état initial jusqu'à l'instant présent
	If (paramDoc.f_TypeEtat(0)<>"Initial") Then
		Formule = |@Trim(@Unique(f_ActeursWorkflowIndividus:Remote_User))|
		paramDoc.f_ActeursWorkflowIndividus = Evaluate(Formule,paramDoc)
	End If
	
	' On efface date et acteur, pour le cas où le document serait un modèle/brouillon
	paramDoc.f_EnregDate = ""
	paramDoc.f_EnregActeur = ""
	
	' On récupère l'icone de l'état dans le paramétrage
	Formule = |r := @Trim(@Right(f_EtatsIcones;"_|+Trim(Cstr(paramTargetState))+|_"));@Right(r;":")|
	Res = Evaluate(Formule,ParamsDoc)
	paramDoc.f_EtatIcone = Res(0)
	
	' On renseigne la date d'arrivé dans l'état cible
	paramDoc.f_DateArriveeEtat = Now
	
	' Si le document est dans un état "Initial", mais que l'on souhaite le placer dans un autre état,
	' on renseigne la date de sortie de l'état "Initial"
	If  (paramDoc.f_TypeEtat(0)="Initial")  And (paramStateType <>"Initial") Then
		paramDoc.f_DateSortieEtatInit = paramDoc.f_DateArriveeEtat
	End If
	
	' On change le numéro de l'état courant. On le met à la valeur du numéro de l'état cible
	paramDoc.f_Etat = paramTargetState
	' On change le type de l'état courant. On le met à la valeur du type de l'état cible
	paramDoc.f_TypeEtat = paramStateType
	
	' Pour gestion attachements - fonctionnement incertain: à revoir
	paramDoc.f_TempSaved="0"
	
	' C'est fini, on sort
	Exit Sub
	
	
	' - - - - - - - - - - - - - - -
	' Gestion d'erreurs
	' - - - - - - - - - - - - - - -
ChangeStateErrorManagement:
	
	' On log l'erreur
	Call CurrentLogEntry.Clear
	CurrentLogEntry.LogType		= LOGTYPE_ERROR$
	CurrentLogEntry.LibName		= "ProcessingTools"
	CurrentLogEntry.SubName		= "ChangeState"	
	CurrentLogEntry.ErrLine 			= Erl
	CurrentLogEntry.ErrCode		= Err
	CurrentLogEntry.ErrMsg			= Error$
	CurrentLogEntry.Save
	
	' On ajoute l'erreur à la liste des erreurs
	Call CurrentProcessStatus.AddErr(Err, True)
	
	Error ERROR_PROCESSED%
	Exit Sub
End Sub

'++LotusScript Development Environment:2:2:CancelDocVIDEO:1:8
Sub CancelDocVIDEO(paramDoc As NotesDocument, paramTargetState As Integer, paramMailTitle As Variant)
	
	' Gestion d'erreurs
	On Error Goto CancelDocErrorManagement
	
	' - - - - - - - - - -
	' Initialisation
	' - - - - - - - - - -
	
	' Variables locales	
	Dim Formule As String
	Dim Res As Variant
	
	Dim MailDoc As NotesDocument	
	Dim MailTitle As Variant
	
	Dim RichTextItem As NotesRichTextItem
	Dim MailAnnulItem As NotesItem
	
	
	' - - - - - - - - - -
	' Traitement
	' - - - - - - - - - -
	
	
	' Création du mail
	Set MailDoc = New NotesDocument(CurrentDB)
	MailDoc.Form = "Memo"
	
	
	' On change les auteurs potentiels pour que le formulaire ne puisse plus être modifié (autrement que par purge par exemple)
	paramDoc.f_AuteursPotentiels = "[AdminForms]"
	
	
	' Titre du mail		
	MailDoc.Subject = paramMailTitle
	
	' Destinataire	du mail
	Set MailAnnulItem = paramDoc.GetfirstItem("f_MailAnnul")
	Call MailDoc.CopyItem(MailAnnulItem, "SendTo" )
	
	' Corps du mail
	Set RichTextItem = New NotesRichTextItem(MailDoc,"Body")
	
	' Ajout du contenu (onglets) et du lien au mail
	Call BuildMailVIDEO(MailDoc, paramDoc, "f_message06", "f_Lien")
	
	' Envoie du message
	Call MailDoc.Send(False)
	
	
	' On considère que le formulaire est arrivé dans état terminal
	Call ChangeState(paramDoc, paramTargetState, "l_HAnnul","Terminal")
	paramDoc.f_ActeursIndividu =""
	paramDoc.f_ActeursGroupe = ""
	paramDoc.f_EtatTerminal = "A"
	
	
	' On sauvegarde le document
	Call paramDoc.Save(False,False)
	
	
	' C'est fini, on sort
	Exit Sub
	
	
	' - - - - - - - - - - - - - - -
	' Gestion d'erreurs
	' - - - - - - - - - - - - - - -
CancelDocErrorManagement:
	
	' On ne s'occupe pas des erreurs traitées plus bas
	If(Err <> ERROR_PROCESSED%) Then	
		' On log l'erreur		
		Call CurrentLogEntry.Clear	
		CurrentLogEntry.LogType		= LOGTYPE_ERROR$
		CurrentLogEntry.LibName		= "ProcessingTools"
		CurrentLogEntry.SubName		= "CancelDoc"		
		CurrentLogEntry.ErrLine 			= Erl
		CurrentLogEntry.ErrCode		= Err
		CurrentLogEntry.ErrMsg			= Error$
		
		' Cas particuliers		
		If(Err = 4294)Then
			CurrentLogEntry.AddDebugLine("Destinataire du mail introuvable: " + MailDoc.SendTo(0))
		End If
		
		Call CurrentLogEntry.Save
		
		' On ajoute l'erreur à la liste des erreurs
		Call CurrentProcessStatus.AddErr(Err, True)
	End If
	
	
	' En revanche, on signale toujours que l'erreur a été traitée, soit ici, soit dans les procédures appelées
	Error ERROR_PROCESSED%
	Exit Sub	
End Sub
